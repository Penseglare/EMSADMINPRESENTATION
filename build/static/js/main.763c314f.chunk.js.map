{"version":3,"sources":["components/registration/create.component.tsx","config/containerType.tsx","model/registrationmodel.tsx","uiservice/implementation/registrationuiservice.tsx","config/containerconfig.tsx","components/registration/edit.component.tsx","components/registration/TableRow.tsx","components/registration/index.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Create","props","onChangePersonName","bind","onChangeBusinessName","onChangeGstNumber","onSubmit","state","person_name","business_name","business_gst_number","e","this","setState","target","value","preventDefault","obj","axios","post","then","res","console","log","data","style","marginTop","className","type","onChange","Component","TYPES","iregistrationuiservice","Symbol","registrationmodel","_name","_code","_id","registrationuiservice","injectable","id","rmodel","regmodel","get","response","Name","Code","Id","catch","error","regmodels","Array","map","v","i","push","container","Container","to","Edit","containerconfig","getbyId","match","params","history","TableRow","delete","err","onClick","Index","business","getData","object","key","colSpan","tabRow","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.763c314f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class Create extends Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.onChangePersonName = this.onChangePersonName.bind(this);\r\n        this.onChangeBusinessName = this.onChangeBusinessName.bind(this);\r\n        this.onChangeGstNumber = this.onChangeGstNumber.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n  \r\n        this.state = {\r\n            person_name: '',\r\n            business_name: '',\r\n            business_gst_number:''\r\n        }\r\n    }\r\n    onChangePersonName(e: any) {\r\n      this.setState({\r\n        person_name: e.target.value\r\n      });\r\n    }\r\n    onChangeBusinessName(e: any) {\r\n      this.setState({\r\n        business_name: e.target.value\r\n      })  \r\n    }\r\n    onChangeGstNumber(e: any) {\r\n      this.setState({\r\n        business_gst_number: e.target.value\r\n      })\r\n    }\r\n  \r\n    onSubmit(e: any) {\r\n      e.preventDefault();\r\n      const obj = {\r\n        person_name: this.state.person_name,\r\n        business_name: this.state.business_name,\r\n        business_gst_number: this.state.business_gst_number\r\n      };\r\n      axios.post('http://localhost:4000/business/add', obj)\r\n        .then(res => console.log(res.data));\r\n    \r\n      this.setState({\r\n        person_name: '',\r\n        business_name: '',\r\n        business_gst_number: ''\r\n      })\r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            <div style={{ marginTop: 10 }}>\r\n                <h3>Add New Business</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Person Name:  </label>\r\n                        <input \r\n                          type=\"text\" \r\n                          className=\"form-control\" \r\n                          value={this.state.person_name}\r\n                          onChange={this.onChangePersonName}\r\n                          />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Business Name: </label>\r\n                        <input type=\"text\" \r\n                          className=\"form-control\"\r\n                          value={this.state.business_name}\r\n                          onChange={this.onChangeBusinessName}\r\n                          />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>GST Number: </label>\r\n                        <input type=\"text\" \r\n                          className=\"form-control\"\r\n                          value={this.state.business_gst_number}\r\n                          onChange={this.onChangeGstNumber}\r\n                          />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Register Business\" className=\"btn btn-primary\"/>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","'use strict';\r\nconst TYPES = {\r\n    iregistrationuiservice: Symbol(\"iregistrationuiservice\"),\r\n    //isample: Symbol(\"isample\")\r\n  };\r\n\r\n  export default TYPES;","export default class registrationmodel\r\n{\r\n    private _name:string =\"\";\r\n    private _code:string =\"\";\r\n    private _id:number =0;\r\n    \r\n    get Name(){\r\n        \r\n            return this._name;\r\n        }\r\n        set Name(value : string)\r\n        {\r\n            this._name = value;\r\n        }\r\n\r\n        get Code(){\r\n        \r\n            return this._code;\r\n        }\r\n        set Code(value : string)\r\n        {\r\n            this._code = value;\r\n        }\r\n\r\n        get Id(){\r\n        \r\n            return this._id;\r\n        }\r\n        set Id(value : number)\r\n        {\r\n            this._id = value;\r\n        }\r\n}","import \"reflect-metadata\";\r\nimport { injectable} from \"inversify\";\r\nimport axios from 'axios';\r\nimport iregistrationuiservice from \"../interface/iregistrationuiservice\";\r\n\r\nimport regmodel from \"../../model/registrationmodel\"\r\n\r\n@injectable()\r\nexport default class registrationuiservice implements iregistrationuiservice\r\n{\r\n  public  getbyId(id:number):any\r\n    {\r\n        debugger;\r\n        let rmodel = new regmodel();\r\n        // return axios.get('http://localhost:4000/api/id'+id+'/getRegisteredUserById')\r\n        return axios.get('http://192.168.1.3:8082/api/id'+id+'/getRegisteredUserById')\r\n        \r\n        .then((response:any) => {\r\n            debugger;\r\n            rmodel.Name = response.data._name;\r\n            rmodel.Code=response.data._code;\r\n            rmodel.Id = response.data._id;\r\n            return rmodel;\r\n         })\r\n        .catch(function (error:any) {\r\n            console.log(error);\r\n        })\r\n\r\n    }\r\n    public  getData():any\r\n    {\r\n        debugger;\r\n        return axios.get('http://192.168.1.3:8082/api/getRegisteredUser')\r\n        .then((response:any) => {\r\n            debugger;\r\n          let regmodels = Array<regmodel>();\r\n          response.data.map((v:any,i:number)=>{\r\n            let rmodel = new regmodel(); \r\n            rmodel.Name = v._name;\r\n            rmodel.Code=v._code;\r\n            rmodel.Id = v._id;\r\n            regmodels.push(rmodel);\r\n          })\r\n            return regmodels;\r\n         })\r\n        .catch(function (error:any) {\r\n            console.log(error);\r\n        })\r\n\r\n    }\r\n}","'use strict';\r\nimport \"reflect-metadata\";\r\nimport { Container} from \"inversify\";\r\nimport TYPES from \"../config/containerType\";\r\nimport iregistrationuiservice from \"../uiservice/interface/iregistrationuiservice\";\r\nimport registrationuiservice from \"../uiservice/implementation/registrationuiservice\";\r\n\r\nconst container = new Container();\r\n\r\n//controller injuction\r\ncontainer.bind<iregistrationuiservice>(TYPES.iregistrationuiservice).to(registrationuiservice);\r\n//business injuction  \r\n//container.bind<isampleManager>(TYPES.isampleManager).to(sampleManager);\r\n\r\n// export default class containerconfig\r\n// {\r\n//   public containerRegistration(myContainer: Container) : void\r\n//   {\r\n//     //controller injuction\r\n//     myContainer.bind<isample>(TYPES.isample).to(sample);\r\n//     //business injuction  \r\n//     myContainer.bind<isampleManager>(TYPES.isampleManager).to(sampleManager);\r\n//   }\r\n\r\n  // public containerResolver(myContainer: Container): any\r\n  // {\r\n  //   var resolver = myContainer.get<isampleManager>(TYPES.isampleManager);\r\n  //  return resolver;\r\n  // }\r\n\r\n//}\r\nexport default container;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport \"reflect-metadata\";\r\nimport { injectable, inject,named,interfaces } from \"inversify\";\r\nimport TYPES from \"../../config/containerType\";\r\nimport containerconfig from \"../../config/containerconfig\"\r\n\r\nimport iregistrationuiservice from \"../../uiservice/interface/iregistrationuiservice\";\r\nimport { wait } from '@testing-library/dom';\r\n\r\n\r\n@injectable()\r\nexport default class Edit extends Component<any,any> {\r\n  constructor(props:any) {\r\n    super(props);\r\n    this.onChangePersonName = this.onChangePersonName.bind(this);\r\n    this.onChangeBusinessName = this.onChangeBusinessName.bind(this);\r\n    this.onChangeGstNumber = this.onChangeGstNumber.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = {\r\n      person_name: '',\r\n      business_name: '',\r\n      business_gst_number:''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n      debugger;\r\n      debugger;\r\n      let iregn = containerconfig.get<iregistrationuiservice>(TYPES.iregistrationuiservice);\r\n       iregn.getbyId(this.props.match.params.id)\r\n            .then((response:any)=>{\r\n           debugger;\r\n           this.setState({person_name: response.Name,\r\n               business_name: response.Code,\r\n               business_gst_number:response.Id });\r\n           }\r\n       )\r\n  \r\n     }\r\n\r\n  onChangePersonName(e:any) {\r\n    this.setState({\r\n      person_name: e.target.value\r\n    });\r\n  }\r\n  onChangeBusinessName(e:any) {\r\n    this.setState({\r\n      business_name: e.target.value\r\n    })  \r\n  }\r\n  onChangeGstNumber(e:any) {\r\n    this.setState({\r\n      business_gst_number: e.target.value\r\n    })\r\n  }\r\n\r\n  onSubmit(e:any) {\r\n    e.preventDefault();\r\n    const obj = {\r\n      person_name: this.state.person_name,\r\n      business_name: this.state.business_name,\r\n      business_gst_number: this.state.business_gst_number\r\n    };\r\n    axios.post('http://localhost:4000/business/update/'+this.props.match.params.id, obj)\r\n        .then((res:any) => console.log(res.data));\r\n    \r\n    this.props.history.push('/index');\r\n  }\r\n \r\n  render() {\r\n    return (\r\n        <div style={{ marginTop: 10 }}>\r\n            <h3>Update Business</h3>\r\n            <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label>Person Name:  </label>\r\n                    <input \r\n                      type=\"text\" \r\n                      className=\"form-control\" \r\n                      value={this.state.person_name}\r\n                      onChange={this.onChangePersonName}\r\n                      />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Business Name: </label>\r\n                    <input type=\"text\" \r\n                      className=\"form-control\"\r\n                      value={this.state.business_name}\r\n                      onChange={this.onChangeBusinessName}\r\n                      />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>GST Number: </label>\r\n                    <input type=\"text\" \r\n                      className=\"form-control\"\r\n                      value={this.state.business_gst_number}\r\n                      onChange={this.onChangeGstNumber}\r\n                      />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" \r\n                      value=\"Update Business\" \r\n                      className=\"btn btn-primary\"/>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass TableRow extends Component<any,any> {\r\n\r\n  constructor(props:any) {\r\n        super(props);\r\n        this.delete = this.delete.bind(this);\r\n    }\r\n    delete() {\r\n        axios.get('http://localhost:4000/business/delete/'+this.props.obj.Id)\r\n            .then(response => console.log('Deleted'))\r\n            .catch(err => console.log(err))\r\n    }\r\n  render() {\r\n    return (\r\n        <tr>\r\n          <td>\r\n            {this.props.obj.Name}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.Code}\r\n          </td>\r\n          <td>\r\n            {this.props.obj.Id}\r\n          </td>\r\n          <td>\r\n            <Link to={\"/edit/\"+this.props.obj.Id} className=\"btn btn-primary\">Edit</Link>\r\n          </td>\r\n          <td>\r\n            <button onClick={this.delete} className=\"btn btn-danger\">Delete</button>\r\n          </td>\r\n        </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableRow;","import React, { Component } from 'react';\r\nimport { injectable, inject,named,interfaces } from \"inversify\";\r\nimport TYPES from \"../../config/containerType\";\r\nimport containerconfig from \"../../config/containerconfig\"\r\nimport iregistrationuiservice from \"../../uiservice/interface/iregistrationuiservice\";\r\nimport axios from 'axios';\r\nimport TableRow from './TableRow';\r\nimport regmodel from \"../../model/registrationmodel\";\r\n\r\n@injectable()\r\nexport default class Index extends Component<any,any> {\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = {business: []};\r\n      }\r\n      componentDidMount(){\r\n        let iregn = containerconfig.get<iregistrationuiservice>(TYPES.iregistrationuiservice);\r\n        iregn.getData()\r\n             .then((response:any)=>{\r\n            debugger;\r\n            this.setState({business:response});\r\n            }\r\n        )\r\n      }\r\n      tabRow(){\r\n        return this.state.business.map(function(object:any, i:any){\r\n          debugger;\r\n            return <TableRow obj={object} key={i} />;\r\n        });\r\n      }\r\n  \r\n      render() {\r\n        return (\r\n          <div>\r\n            <h3>Business List</h3>\r\n            <table className=\"table table-striped\" style={{ marginTop: 20 }}>\r\n              <thead>\r\n                <tr>\r\n                  <th>Person</th>\r\n                  <th>Business</th>\r\n                  <th>GST Number</th>\r\n                  <th colSpan={2}>Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                { this.tabRow() }\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        );\r\n      }\r\n}","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\n\r\nimport Create from './components/registration/create.component';\r\nimport Edit from './components/registration/edit.component';\r\nimport Index from './components/registration/index.component';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n    <div className=\"container\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <Link to={'/'} className=\"navbar-brand\">React CRUD Example</Link>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"nav-item\">\r\n              <Link to={'/'} className=\"nav-link\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to={'/create'} className=\"nav-link\">Create</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to={'/index'} className=\"nav-link\">Index</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav> <br/>\r\n      <h2>Welcome to React CRUD Tutorial</h2> <br/>\r\n      <Switch>\r\n          <Route exact path='/create' component={ Create } />\r\n          <Route path='/edit/:id' component={ Edit } />\r\n          <Route path='/index' component={ Index } />\r\n      </Switch>\r\n    </div>\r\n  </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n    <App />\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}